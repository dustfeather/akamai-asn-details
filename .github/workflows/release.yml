name: Release Extension

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run integration tests
      run: npm run test:integration
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Run tests with coverage
      run: npm run test:coverage
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Validate Cloudflare API connectivity
      run: |
        if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
          echo "‚ùå CLOUDFLARE_API_TOKEN is not set"
          exit 1
        fi
        
        echo "üîç Testing Cloudflare API connectivity..."
        
        # Test API endpoint with a valid Radar endpoint
        response=$(curl -s -w "%{http_code}" -o /tmp/api_response.json \
          -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
          -H "Accept: application/json" \
          "https://api.cloudflare.com/client/v4/radar/ranking/top")
        
        http_code="${response: -3}"
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Cloudflare API is accessible and responding correctly"
          echo "üìä API Response sample:"
          head -c 200 /tmp/api_response.json
          echo ""
        else
          echo "‚ùå Cloudflare API returned HTTP $http_code"
          echo "üìÑ Response:"
          cat /tmp/api_response.json
          exit 1
        fi
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  release:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Create Chrome extension package
      run: |
        cd extension
        zip -r ../akamai-asn-details-chrome.zip . -x "*.xpi" "*.zip"
        
    - name: Create Firefox extension package
      run: |
        cd extension
        # Install web-ext with specific version to avoid Node.js compatibility issues
        npm install -g web-ext@7.8.0
        
        # Build Firefox XPI directly without config file
        web-ext build --source-dir . --artifacts-dir ../ --filename akamai-asn-details-firefox.xpi
        
    - name: Verify build artifacts
      run: |
        echo "Verifying build artifacts..."
        ls -la *.zip *.xpi
        echo "File sizes:"
        du -h *.zip *.xpi
        
        if [ ! -f "akamai-asn-details-chrome.zip" ]; then
          echo "‚ùå Chrome extension package not found!"
          exit 1
        fi
        
        if [ ! -f "akamai-asn-details-firefox.xpi" ]; then
          echo "‚ùå Firefox extension package not found!"
          exit 1
        fi
        
        echo "‚úÖ All build artifacts verified"
        
    - name: Create Release with Assets
      run: |
        set -e
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Creating release for tag: $TAG_NAME"
        
        # Check if a release already exists for this tag (GitHub auto-creates releases)
        echo "Checking for existing release..."
        EXISTING_RELEASE=$(curl -s -w "\n%{http_code}" \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG_NAME")
        
        EXISTING_HTTP_CODE=$(echo "$EXISTING_RELEASE" | tail -n1)
        EXISTING_BODY=$(echo "$EXISTING_RELEASE" | sed '$d')
        
        if [ "$EXISTING_HTTP_CODE" = "200" ]; then
          EXISTING_RELEASE_ID=$(echo "$EXISTING_BODY" | jq -r '.id')
          if [ "$EXISTING_RELEASE_ID" != "null" ] && [ -n "$EXISTING_RELEASE_ID" ]; then
            echo "‚ö†Ô∏è  Release already exists for tag $TAG_NAME (ID: $EXISTING_RELEASE_ID)"
            echo "Deleting existing release to allow asset uploads..."
            
            DELETE_RESPONSE=$(curl -s -w "\n%{http_code}" -X DELETE \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/$EXISTING_RELEASE_ID")
            
            DELETE_HTTP_CODE=$(echo "$DELETE_RESPONSE" | tail -n1)
            
            if [ "$DELETE_HTTP_CODE" != "204" ]; then
              echo "‚ùå Failed to delete existing release. HTTP status: $DELETE_HTTP_CODE"
              echo "Response: $(echo "$DELETE_RESPONSE" | sed '$d')"
              exit 1
            fi
            
            echo "‚úÖ Existing release deleted successfully"
            # Wait a moment for GitHub to process the deletion
            sleep 2
          fi
        elif [ "$EXISTING_HTTP_CODE" != "404" ]; then
          echo "‚ö†Ô∏è  Unexpected response when checking for existing release. HTTP status: $EXISTING_HTTP_CODE"
          echo "Response: $EXISTING_BODY"
          # Continue anyway - might be a network issue
        else
          echo "‚úÖ No existing release found for tag $TAG_NAME"
        fi
        
        # Verify deletion completed - check multiple times if needed
        echo "Verifying deletion completed..."
        for i in 1 2 3; do
          CHECK_RELEASE=$(curl -s -w "\n%{http_code}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG_NAME")
          
          CHECK_HTTP_CODE=$(echo "$CHECK_RELEASE" | tail -n1)
          
          if [ "$CHECK_HTTP_CODE" = "404" ]; then
            echo "‚úÖ Confirmed release is deleted (attempt $i)"
            break
          elif [ $i -eq 3 ]; then
            echo "‚ö†Ô∏è  Release still exists after deletion attempts, but continuing..."
          else
            echo "‚è≥ Release still exists, waiting... (attempt $i)"
            sleep 3
          fi
        done
        
        # Create the release as DRAFT first to allow asset uploads
        RELEASE_DATA='{
          "tag_name": "'$TAG_NAME'",
          "name": "Release '$TAG_NAME'",
          "body": "## Release '$TAG_NAME'\n\nThis release includes:\n- Chrome extension package (akamai-asn-details-chrome.zip)\n- Firefox extension package (akamai-asn-details-firefox.xpi)\n\n### Installation\n- **Chrome**: Download the .zip file and load as unpacked extension\n- **Firefox**: Download the .xpi file and install as temporary add-on",
          "draft": true,
          "prerelease": false
        }'
        
        echo "Creating draft release..."
        RELEASE_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          -d "$RELEASE_DATA" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/releases")
        
        RELEASE_HTTP_CODE=$(echo "$RELEASE_RESPONSE" | tail -n1)
        RELEASE_BODY=$(echo "$RELEASE_RESPONSE" | sed '$d')
        
        echo "Release creation HTTP status: $RELEASE_HTTP_CODE"
        echo "Release creation response:"
        echo "$RELEASE_BODY"
        
        if [ "$RELEASE_HTTP_CODE" != "201" ]; then
          echo "‚ùå Failed to create release. HTTP status: $RELEASE_HTTP_CODE"
          echo "Response: $RELEASE_BODY"
          exit 1
        fi
        
        # Extract release ID
        RELEASE_ID=$(echo "$RELEASE_BODY" | jq -r '.id')
        
        if [ "$RELEASE_ID" = "null" ] || [ -z "$RELEASE_ID" ]; then
          echo "‚ùå Failed to extract release ID"
          echo "Response: $RELEASE_BODY"
          exit 1
        fi
        
        echo "‚úÖ Draft release created with ID: $RELEASE_ID"
        
        # Upload Chrome extension
        echo "Uploading Chrome extension..."
        CHROME_UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/zip" \
          --data-binary @akamai-asn-details-chrome.zip \
          "https://uploads.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID/assets?name=akamai-asn-details-chrome.zip")
        
        CHROME_HTTP_CODE=$(echo "$CHROME_UPLOAD_RESPONSE" | tail -n1)
        CHROME_BODY=$(echo "$CHROME_UPLOAD_RESPONSE" | sed '$d')
        
        echo "Chrome upload HTTP status: $CHROME_HTTP_CODE"
        echo "Chrome upload response:"
        echo "$CHROME_BODY"
        
        if [ "$CHROME_HTTP_CODE" != "201" ]; then
          echo "‚ùå Failed to upload Chrome extension. HTTP status: $CHROME_HTTP_CODE"
          echo "Response: $CHROME_BODY"
          exit 1
        fi
        
        echo "‚úÖ Chrome extension uploaded successfully"
        
        # Upload Firefox extension
        echo "Uploading Firefox extension..."
        FIREFOX_UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/zip" \
          --data-binary @akamai-asn-details-firefox.xpi \
          "https://uploads.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID/assets?name=akamai-asn-details-firefox.xpi")
        
        FIREFOX_HTTP_CODE=$(echo "$FIREFOX_UPLOAD_RESPONSE" | tail -n1)
        FIREFOX_BODY=$(echo "$FIREFOX_UPLOAD_RESPONSE" | sed '$d')
        
        echo "Firefox upload HTTP status: $FIREFOX_HTTP_CODE"
        echo "Firefox upload response:"
        echo "$FIREFOX_BODY"
        
        if [ "$FIREFOX_HTTP_CODE" != "201" ]; then
          echo "‚ùå Failed to upload Firefox extension. HTTP status: $FIREFOX_HTTP_CODE"
          echo "Response: $FIREFOX_BODY"
          exit 1
        fi
        
        echo "‚úÖ Firefox extension uploaded successfully"
        
        # Publish the draft release
        echo "Publishing release..."
        PUBLISH_DATA='{
          "draft": false
        }'
        
        PUBLISH_RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          -d "$PUBLISH_DATA" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID")
        
        PUBLISH_HTTP_CODE=$(echo "$PUBLISH_RESPONSE" | tail -n1)
        PUBLISH_BODY=$(echo "$PUBLISH_RESPONSE" | sed '$d')
        
        echo "Publish HTTP status: $PUBLISH_HTTP_CODE"
        
        if [ "$PUBLISH_HTTP_CODE" != "200" ]; then
          echo "‚ùå Failed to publish release. HTTP status: $PUBLISH_HTTP_CODE"
          echo "Response: $PUBLISH_BODY"
          exit 1
        fi
        
        echo "‚úÖ Release published successfully"
        echo "‚úÖ Release and assets uploaded successfully"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Verify release creation
      run: |
        set -e
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Verifying release creation for tag: $TAG_NAME"
        
        # Check if release exists and has assets
        RELEASE_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG_NAME")
        
        if ! echo "$RELEASE_RESPONSE" | grep -q '"id"'; then
          echo "‚ùå Failed to verify release $TAG_NAME"
          echo "Response: $RELEASE_RESPONSE"
          exit 1
        fi
        
        echo "‚úÖ Release $TAG_NAME created successfully"
        echo "Release URL: $(echo "$RELEASE_RESPONSE" | jq -r '.html_url')"
        
        # Check for required assets
        ASSET_COUNT=$(echo "$RELEASE_RESPONSE" | jq -r '.assets | length')
        echo "Found $ASSET_COUNT asset(s) attached to release"
        
        if [ "$ASSET_COUNT" -lt 2 ]; then
          echo "‚ùå Expected at least 2 assets (Chrome zip and Firefox xpi), but found $ASSET_COUNT"
          exit 1
        fi
        
        # Verify specific assets exist
        CHROME_ASSET=$(echo "$RELEASE_RESPONSE" | jq -r '.assets[] | select(.name == "akamai-asn-details-chrome.zip") | .name')
        FIREFOX_ASSET=$(echo "$RELEASE_RESPONSE" | jq -r '.assets[] | select(.name == "akamai-asn-details-firefox.xpi") | .name')
        
        if [ -z "$CHROME_ASSET" ]; then
          echo "‚ùå Chrome extension (akamai-asn-details-chrome.zip) not found in release assets"
          exit 1
        fi
        
        if [ -z "$FIREFOX_ASSET" ]; then
          echo "‚ùå Firefox extension (akamai-asn-details-firefox.xpi) not found in release assets"
          exit 1
        fi
        
        echo "‚úÖ All required assets found:"
        echo "$RELEASE_RESPONSE" | jq -r '.assets[] | "  - \(.name) (\(.size) bytes)"'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
