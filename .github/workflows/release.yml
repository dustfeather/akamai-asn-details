name: Release Extension

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run integration tests
      run: npm run test:integration
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Validate Cloudflare API connectivity
      run: |
        if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
          echo "‚ùå CLOUDFLARE_API_TOKEN is not set"
          exit 1
        fi
        
        echo "üîç Testing Cloudflare API connectivity..."
        
        # Test API endpoint with a valid Radar endpoint
        response=$(curl -s -w "%{http_code}" -o /tmp/api_response.json \
          -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
          -H "Accept: application/json" \
          "https://api.cloudflare.com/client/v4/radar/ranking/top")
        
        http_code="${response: -3}"
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Cloudflare API is accessible and responding correctly"
          echo "üìä API Response sample:"
          head -c 200 /tmp/api_response.json
          echo ""
        else
          echo "‚ùå Cloudflare API returned HTTP $http_code"
          echo "üìÑ Response:"
          cat /tmp/api_response.json
          exit 1
        fi
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Create Chrome extension package
      run: |
        cd extension
        zip -r ../akamai-asn-details-chrome.zip . -x "*.xpi" "*.zip"
        
    - name: Create Firefox extension package
      run: |
        cd extension
        # Install web-ext with specific version to avoid Node.js compatibility issues
        npm install -g web-ext@7.8.0
        
        # Build Firefox XPI directly without config file
        web-ext build --source-dir . --artifacts-dir ../ --filename akamai-asn-details-firefox.xpi
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          akamai-asn-details-chrome.zip
          akamai-asn-details-firefox.xpi
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
