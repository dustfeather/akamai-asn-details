name: Release Extension

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run integration tests
      run: npm run test:integration
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Validate Cloudflare API connectivity
      run: |
        if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
          echo "‚ùå CLOUDFLARE_API_TOKEN is not set"
          exit 1
        fi
        
        echo "üîç Testing Cloudflare API connectivity..."
        
        # Test API endpoint with a valid Radar endpoint
        response=$(curl -s -w "%{http_code}" -o /tmp/api_response.json \
          -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
          -H "Accept: application/json" \
          "https://api.cloudflare.com/client/v4/radar/ranking/top")
        
        http_code="${response: -3}"
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Cloudflare API is accessible and responding correctly"
          echo "üìä API Response sample:"
          head -c 200 /tmp/api_response.json
          echo ""
        else
          echo "‚ùå Cloudflare API returned HTTP $http_code"
          echo "üìÑ Response:"
          cat /tmp/api_response.json
          exit 1
        fi
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Create Chrome extension package
      run: |
        cd extension
        zip -r ../akamai-asn-details-chrome.zip . -x "*.xpi" "*.zip"
        
    - name: Create Firefox extension package
      run: |
        cd extension
        # Install web-ext with specific version to avoid Node.js compatibility issues
        npm install -g web-ext@7.8.0
        
        # Build Firefox XPI directly without config file
        web-ext build --source-dir . --artifacts-dir ../ --filename akamai-asn-details-firefox.xpi
        
    - name: Verify build artifacts
      run: |
        echo "Verifying build artifacts..."
        ls -la *.zip *.xpi
        echo "File sizes:"
        du -h *.zip *.xpi
        
        if [ ! -f "akamai-asn-details-chrome.zip" ]; then
          echo "‚ùå Chrome extension package not found!"
          exit 1
        fi
        
        if [ ! -f "akamai-asn-details-firefox.xpi" ]; then
          echo "‚ùå Firefox extension package not found!"
          exit 1
        fi
        
        echo "‚úÖ All build artifacts verified"
        
    - name: Create Release with Assets
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Creating release for tag: $TAG_NAME"
        
        # Create the release using GitHub API
        RELEASE_DATA='{
          "tag_name": "'$TAG_NAME'",
          "name": "Release '$TAG_NAME'",
          "body": "## Release '$TAG_NAME'\n\nThis release includes:\n- Chrome extension package (akamai-asn-details-chrome.zip)\n- Firefox extension package (akamai-asn-details-firefox.xpi)\n\n### Installation\n- **Chrome**: Download the .zip file and load as unpacked extension\n- **Firefox**: Download the .xpi file and install as temporary add-on",
          "draft": false,
          "prerelease": false
        }'
        
        echo "Creating release..."
        RELEASE_RESPONSE=$(curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          -d "$RELEASE_DATA" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/releases")
        
        echo "Release creation response:"
        echo "$RELEASE_RESPONSE"
        
        # Extract release ID
        RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
        
        if [ "$RELEASE_ID" = "null" ] || [ -z "$RELEASE_ID" ]; then
          echo "‚ùå Failed to create release"
          echo "Response: $RELEASE_RESPONSE"
          exit 1
        fi
        
        echo "‚úÖ Release created with ID: $RELEASE_ID"
        
        # Upload Chrome extension
        echo "Uploading Chrome extension..."
        CHROME_UPLOAD_RESPONSE=$(curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/zip" \
          --data-binary @akamai-asn-details-chrome.zip \
          "https://uploads.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID/assets?name=akamai-asn-details-chrome.zip")
        
        echo "Chrome upload response:"
        echo "$CHROME_UPLOAD_RESPONSE"
        
        # Upload Firefox extension
        echo "Uploading Firefox extension..."
        FIREFOX_UPLOAD_RESPONSE=$(curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/zip" \
          --data-binary @akamai-asn-details-firefox.xpi \
          "https://uploads.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID/assets?name=akamai-asn-details-firefox.xpi")
        
        echo "Firefox upload response:"
        echo "$FIREFOX_UPLOAD_RESPONSE"
        
        echo "‚úÖ Release and assets uploaded successfully"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Verify release creation
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Verifying release creation for tag: $TAG_NAME"
        
        # Check if release exists and has assets
        RELEASE_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG_NAME")
        
        if echo "$RELEASE_RESPONSE" | grep -q '"id"'; then
          echo "‚úÖ Release $TAG_NAME created successfully"
          echo "Release URL: $(echo "$RELEASE_RESPONSE" | jq -r '.html_url')"
          echo "Assets:"
          echo "$RELEASE_RESPONSE" | jq -r '.assets[] | "  - \(.name) (\(.size) bytes)"'
        else
          echo "‚ùå Failed to verify release $TAG_NAME"
          echo "Response: $RELEASE_RESPONSE"
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
